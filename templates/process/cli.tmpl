#### Upgrade the Control Plane

1. Upgrade the control plane to the next Kubernetes minor version:

```sh
aws eks update-cluster-version --region <REGION> --name <CLUSTER-NAME> --kubernetes-version {{ target_version }}
```

2. Wait for the control plane to finish upgrading before proceeding with any further modifications

#### Upgrade the Data Plane

{{#if is_self_managed_node_group }}
##### [Self-Managed Node Group](https://docs.aws.amazon.com/eks/latest/userguide/update-workers.html)

It is recommended to use the [instance refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html) functionality provided by AWS Autoscaling Groups in coordination with the [`node-termination-handler`](https://github.com/aws/aws-node-termination-handler) to gracefully migrate pods from existing to new EC2 instances when upgrading. Once the launch template has been updated with the new AMI ID, the Autoscaling Group will initiate the instance refresh cycle to rollout the replacement of instances to meet the new launch template specification. The `node-termination-handler` listens to the Autoscaling Group lifecycle events to intervene and gracefully migrate pods off of the instance(s) being replaced.

To upgrade a self-managed node group:
1. Ensure the instance refresh has been configured on the AutoScaling Group:

TODO

2. Update the launch template, specifying the ID of an AMI that matches the control plane's Kubernetes version:

```sh
aws ec2 create-launch-template-version --launch-template-id <ID> \
  --source-version <VER> --launch-template-data "ImageId=<AMI-ID>"
```

Where:
- `<ID>` is the ID of your launch template
- `<VER>` is your launch templates current version
- `<AMI-ID>` is the ID of an AMI that matches the control plane's Kubernetes version

3. Update the autoscaling-group to use the new launch template

```sh
aws autoscaling update-auto-scaling-group --auto-scaling-group-name <NAME> \
  --launch-template LaunchTemplateId=<ID<>,Version=<VER>
```

Where:
- `<NAME>` is the name of your autoscaling group
- `<ID>` is the ID of your launch template
- `<VER>` is the version of your launch template; `'$Latest'` can be used to reference the latest version

{{/if}}

{{#if is_eks_managed_node_group }}
##### [EKS Managed Node Group](https://docs.aws.amazon.com/eks/latest/userguide/update-managed-node-group.html)

1. Ensure
1. Update the Kubernetes version specified on the EKS Managed Node Group

```
aws eks update-nodegroup-version --region <REGION> --cluster-name <CLUSTER-NAME> --nodegroup-name <NODEGROUP-NAME> --kubernetes-version {{ target_version }}
```

If using a custom AMI:

```
aws eks update-nodegroup-version --region <REGION> --cluster-name <CLUSTER-NAME> --nodegroup-name <NODEGROUP-NAME> --kubernetes-version {{ target_version }} --launch-template <LAUNCH-TEMPLATE>
```
{{/if}}

{{#if is_fargate_profile }}
##### Fargate Profile

Note: Fargate profiles can't be changed. However, you can create a new, updated profile to replace an existing profile, and then delete the original. It is recommended to

1. Create a new Fargate profile(s) with the desired Kubernetes version in the profile name
```sh
aws eks create-fargate-profile --region <REGION> --cluster-name <CLUSTER-NAME> --fargate-profile-name <FARGATE-PROFILE-NAME>-{{ target_version }} --pod-execution-role-arn <POD-EXECUTION-ROLE-ARN>
```
{{/if}}
